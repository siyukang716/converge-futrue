package com.cloud.shiro;

import com.cloud.sys.mapper.UserMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.cache.Cache;
import org.apache.shiro.cache.CacheManager;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.concurrent.atomic.AtomicInteger;

/**
 * @项目名称：wyait-manage
 * @包名：com.wyait.manage.shiro
 * @类描述：shiro之密码输入次数限制6次，并锁定2分钟
 * @创建人：wyait
 * @创建时间：2018年1月23日17:23:10
 * @version：V1.0
 */
@Slf4j
public class RetryLimitHashedCredentialsMatcher extends HashedCredentialsMatcher {
    @Autowired
    private UserMapper userMapper;


    //集群中可能会导致出现验证多过5次的现象，因为AtomicInteger只能保证单节点并发
    //解决方案，利用ehcache、redis（记录错误次数）和mysql数据库（锁定）的方式处理：密码输错次数限制； 或两者结合使用
    private Cache<String, AtomicInteger> passwordRetryCache;  
  
    public RetryLimitHashedCredentialsMatcher(CacheManager cacheManager) {
        //读取ehcache中配置的登录限制锁定时间
        passwordRetryCache = cacheManager.getCache("passwordRetryCache");  
    }

    @Override
    public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info) {

        //获取用户名
        String username = (String)token.getPrincipal();
        //获取用户登录次数
        AtomicInteger retryCount = passwordRetryCache.get(username);
        if (retryCount == null) {
            //如果用户没有登陆过,登陆次数加1 并放入缓存
            retryCount = new AtomicInteger(0);
            passwordRetryCache.put(username, retryCount);
            log.info("--------用户锁定加一----------------用户:-----"+username);
        }
        if (retryCount.incrementAndGet() > 5) {
            //如果用户登陆失败次数大于5次 抛出锁定用户异常  并修改数据库字段
            //LambdaQueryWrapper<UserEntity> lambda = new LambdaQueryWrapper<>();
            //UserEntity user = userMapper.selectOne(lambda);
            //User user = userMapper.findByUserName(username);
//            if (user != null && "0".equals(user.getState())){
//                //数据库字段 默认为 0  就是正常状态 所以 要改为1
//                //修改数据库的状态字段为锁定
//                user.setState("1");
//                userMapper.update(user);
//            }
            log.info("锁定用户" + username);
            //抛出用户锁定异常
            throw new LockedAccountException();
        }
        //判断用户账号和密码是否正确
        boolean matches = super.doCredentialsMatch(token, info);
        if (matches) {
            //如果正确,从缓存中将用户登录计数 清除
            passwordRetryCache.remove(username);
        }
        return matches;
    }

    /**
     * 根据用户名 解锁用户
     * @param username
     * @return
     */
    public void unlockAccount(String username){
        passwordRetryCache.remove(username);
//        User user = userMapper.findByUserName(username);
//        if (user != null){
//            //修改数据库的状态字段为锁定
//            user.setState("0");
//            userMapper.update(user);
//            passwordRetryCache.remove(username);
//        }
    }


























    /**
     * 在回调方法doCredentialsMatch(AuthenticationToken token,AuthenticationInfo info)中进行身份认证的密码匹配，
     * </br>这里我们引入了Ehcahe用于保存用户登录次数，如果登录失败retryCount变量则会一直累加，如果登录成功，那么这个count就会从缓存中移除，
     * </br>从而实现了如果登录次数超出指定的值就锁定。
     * @param token
     * @param info
     * @return
     */
//    @Override
//    public boolean doCredentialsMatch(AuthenticationToken token,
//            AuthenticationInfo info) {
//        //获取登录用户名
//        String username = (String) token.getPrincipal();
//        //从ehcache中获取密码输错次数
//        // retryCount
//        AtomicInteger retryCount = passwordRetryCache.get(username);
//        if (retryCount == null) {
//            //第一次
//            retryCount = new AtomicInteger(0);
//            passwordRetryCache.put(username, retryCount);
//        }
//        //retryCount.incrementAndGet()自增：count + 1
//        if (retryCount.incrementAndGet() > 5) {
//            // if retry count > 5 throw  超过5次 锁定
//            throw new ExcessiveAttemptsException("username:"+username+" tried to login more than 5 times in period");
//        }
//        //否则走判断密码逻辑
//        boolean matches = super.doCredentialsMatch(token, info);
//        if (matches) {
//            // clear retry count  清楚ehcache中的count次数缓存
//            passwordRetryCache.remove(username);
//        }
//        return matches;
//    }
} 