package ${packageName}.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.cloud.util.IStatusMessage;
import com.cloud.util.PageDataResult;
import com.cloud.util.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import ${packageName}.entity.${entityName}Entity;
import ${packageName}.service.${serviceName};
#foreach($field in ${columns})
    #if($field.isPk.equals("1"))##生成主键排在第一位
        #set ( $primarykey = "${field.javaField}" )
    #end
#end

/**
 *
 * @ClassName: ${controllerName}
 * @Description: TODO(这里用一句话描述这个类的作用)${table.tableComment}
 * @author ${author}
 * @date ${date}
 */
@Controller
@Api(value = "${table.tableComment}crud功能",tags = "${table.tableComment}")
@RequestMapping(value ="${table.tableName}")
public class ${controllerName}  {
    @Autowired
    private ${serviceName} ${serviceName.substring(0, 1).toLowerCase()}${serviceName.substring(1)};
    /**
    @GetMapping("/tolist")
    public ModelAndView toList() {
        ModelAndView model = new ModelAndView();
        model.setViewName("");
        return model;
    }
    */
    /**
     * 列表查询
     * @param p
     * @return
     */
    @GetMapping("/getList")
    @ResponseBody
    @ApiOperation(value = "列表查询",httpMethod = "GET")
    public PageDataResult getPageList(Page p) {
        PageDataResult pdr = new PageDataResult();
        QueryWrapper<${entityName}Entity> wrapper = new QueryWrapper<${entityName}Entity>();
        IPage<${entityName}Entity> page = ${serviceName.substring(0, 1).toLowerCase()}${serviceName.substring(1)}.page(p,wrapper);
        pdr.setTotals((int)page.getTotal());
        pdr.setList(page.getRecords());
        return pdr;
    }


    /**
     * 增加或修改
     * @param
     * @return
     */
    @PostMapping("/aOrU")
    @ResponseBody
    @ApiOperation(value = "新增修改接口", notes = "新增修改接口")
    public Result aOrU(${entityName}Entity entity) {
        Result result = Result.getInstance();
        boolean b = ${serviceName.substring(0, 1).toLowerCase()}${serviceName.substring(1)}.saveOrUpdate(entity);
        result.setStatus(IStatusMessage.SystemStatus.SUCCESS.getCode());
        result.setMessage("操作成功!!!");
        if (!b) {
        result.setStatus(IStatusMessage.SystemStatus.ERROR.getCode());
        result.setMessage("操作异常，请您稍后再试");
        }
        return result;
    }

    /**
     * 删除
     * @param
     * @return
     */
    @GetMapping("/del")
    @ResponseBody
    @ApiOperation(value = "删除接口", notes = "删除接口")
    public Result del(Long $primarykey) {
        Result result = Result.getInstance();
        boolean b = ${serviceName.substring(0, 1).toLowerCase()}${serviceName.substring(1)}.removeById($primarykey);
        result.setStatus(IStatusMessage.SystemStatus.SUCCESS.getCode());
        result.setMessage("删除成功!!!!!!");
        if (!b) {
        result.setStatus(IStatusMessage.SystemStatus.ERROR.getCode());
        result.setMessage("操作异常，请您稍后再试");
        }
        return result;
    }

    @GetMapping("/getById")
    @ResponseBody
    @ApiOperation(value = "根据主键查询对象接口", notes = "根据主键查询对象接口")
    public Result getById(Long $primarykey) {
        Result result = Result.getInstance();
        ${entityName}Entity obj = ${serviceName.substring(0, 1).toLowerCase()}${serviceName.substring(1)}.getById($primarykey);
        result.setData(obj);
        result.setStatus(IStatusMessage.SystemStatus.SUCCESS.getCode());
        result.setMessage("获取成功!!!!!!");
        if (obj == null){
        result.setStatus(IStatusMessage.SystemStatus.ERROR.getCode());
        result.setMessage("操作异常，请您稍后再试");
        }
        return result;
    }
}